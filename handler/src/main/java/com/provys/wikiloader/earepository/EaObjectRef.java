package com.provys.wikiloader.earepository;

import javax.annotation.Nonnull;
import java.util.Collection;
import java.util.List;
import java.util.Optional;

/**
 * Common interface for packages and elements as these two objects all together form tree of ea repository objects
 */
public interface EaObjectRef extends Comparable<EaObjectRef> {

    /**
     * @return parent object
     */
    @Nonnull
    Optional<EaObjectRef> getParent();

    /**
     * @return name of given object; note that it is Enterprise Architect name, not necessarily title of given topic
     */
    @Nonnull
    String getName();

    /**
     * @return alias of given object
     */
    @Nonnull
    Optional<String> getAlias();

    /**
     * @return stereotype of given object; for packages, StereotypeEx is used instead
     */
    @Nonnull
    Optional<String> getStereotype();

    /**
     * @return true if given object is exported as topic to wiki, false otherwise. Similar to hasLink, but hasLink
     * returns true even for some elements (boundary, UMLDiagram) that are not exported on their own
     */
    boolean isTopic();

    /**
     * Get wiki Id of topic, corresponding to given Enterprise Architect object. Empty optional if no topic is generated
     * from given object. Topic does not have leading : and is full topic Id (including start topic name if appropriate)
     *
     * @return topic this object exports to
     */
    Optional<String> getTopicId();

    /**
     * Get namespace, corresponding to given topic in wiki. Only if Enterprise Architect object translates to namespace,
     * empty if it translates to single topic. Namespace does not have leading : and has trailing :
     *
     * @return namespace this object exports to
     */
    Optional<String> getNamespace();

    /**
     * Get link to topic, with path relative from parent object's namespace. Does not start with .
     *
     * @return link to topic from parent's namespace
     */
    @Nonnull
    Optional<String> getParentLink();

    /**
     * @return true if there is topic on wiki that represents this object, false otherwise. If it is false, calls to
     * appendLink and appendParentLink throw exception
     */
    boolean hasLink();

    /**
     * Append namespace, corresponding to this object. If object does not map to namespace, throws exception. Namespace
     * does not have leading : and has trailing :
     *
     * @param builder is {@code StringBuilder} namespace should be appended to
     */
    void appendNamespace(StringBuilder builder);

    /**
     * Append link to topic, corresponding to this object. Link starts with :. Namespace link ends with : without final
     * start topic name
     *
     * @param builder is {@code StringBuilder} link should be appended to
     */
    void appendLink(StringBuilder builder);

    /**
     * Append link to topic, with path relative from parent object's namespace. Does not start with .
     *
     * @param builder is {@code StringBuilder} link should be appended to
     */
    void appendParentLink(StringBuilder builder);

    /**
     * Append all topics and namespaces generated by this element to parent's namespace
     *
     * @param pages is collection of pages, where this handler's generated topics and namespaces should be added to
     */
    void appendPages(Collection<String> pages);

    /**
     * Retrieve position of given items, defined as list of tree positions, starting from root package (model). Used to
     * implement comparable
     *
     * @return list with tree positions, starting from root package to given object
     */
    @Nonnull
    List<Integer> getPos();
}
